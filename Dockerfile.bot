# Build stage
FROM node:16 AS base
WORKDIR /app
RUN apt update && apt upgrade -y && apt install -y git
ENV YARN_CACHE_FOLDER=.yarn-cache
RUN yarn global add turbo

# Prune
FROM base as pruner
COPY . .
RUN turbo prune --scope=bot --docker

FROM base AS dev-deps
COPY --from=pruner /app/out/json/ .
COPY --from=pruner /app/out/yarn.lock ./yarn.lock
RUN yarn install --frozen-lockfile
# Install build-essentials - https://github.com/mhart/alpine-node/issues/27#issuecomment-390187978
# RUN apk add --no-cache --virtual .build-deps alpine-sdk python3 \
#   && yarn install
RUN yarn install

FROM base AS prod-deps
COPY --from=pruner /app/out/json/ .
COPY --from=pruner /app/out/yarn.lock ./yarn.lock
COPY --from=dev-deps /app/${YARN_CACHE_FOLDER} /${YARN_CACHE_FOLDER} 
RUN yarn install --frozen-lockfile --production --prefer-offline
# TODO: Think of a better way of separating prisma client
COPY --from=pruner /app/db/schema.prisma ./db/schema.prisma
RUN yarn prisma generate
RUN rm -rf /app/${YARN_CACHE_FOLDER}

# Copy source code of pruned subworkspace and build
FROM base as builder
COPY --from=dev-deps /app/ .
COPY --from=pruner /app/out/full/ .
RUN yarn turbo run build --scope=bot --include-dependencies --no-deps
RUN find . -name node_modules | xargs rm -rf

# App stage
FROM base as runner
COPY --from=prod-deps /app/ .
COPY --from=builder /app/ .
# CMD yarn start
CMD yarn start --scope=bot --include-dependencies --no-deps